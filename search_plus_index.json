{"./":{"url":"./","title":"概要","keywords":"","body":"1. PrismCascade とは 動画編集の基盤システム （C++製） プラグインによる柔軟な編集を目指す GUIの有無やOSにかかわらず動作可能なものを目指す 2. 基本構成 core 動画編集の制御を行う。 C++ライブラリの形で提供。 plugin 動画に対する操作の本体 Windowsでは .dll ファイル，Linuxでは .so ファイル UI 動画編集の補助やプレビューなどを行う。 coreに対して具体的な操作を要求する。 GUI と CUI 両方を作成予定 3. プラグイン plugins/ 以下に存在する dll / so ファイルを探索し，プラグインとして読み込む。 プラグインには Effect と Macro が存在する。 基本的には， Effect プラグインを組み合わせることで映像編集を行う。 各プラグインは1つの主出力と，0～∞個の副出力を持つ 各プラグインはパラメータをいくつか持つことが出来て，以下の3つの方法で値を入力できる。 値の直接指定 埋め込んだ他 Effect プラグインの主出力 他の Effect プラグインの副出力の参照 4. 目指す物 プラットフォーム非依存 少なくとも Windows, Linux で動作する物を目指す UI と 処理の分離 将来的にUIを差し替えたり自動処理スクリプトからの呼び出し等をする際に，互換性を容易に保てる コミュニティによりプラグインが活発に作成される状態を目指す 5. 開発理念 拡張性重視 本体の機能を簡潔にする プラグインを中心に添える 堅牢な設計 型検査をする 全てのUI操作をエフェクトASTの操作と対応させる 1. PrismCascade とは2. 基本構成3. プラグイン4. 目指す物5. 開発理念"},"architecture/types.html":{"url":"architecture/types.html","title":"型","keywords":"","body":"1. 型 1.1. 基本型 Int C++ の std::int64_t 型と対応 Bool C++ の bool 型と対応 Float C++ の double 型と対応 Text 文字列 （2^32 バイト未満） Video 映像型 height, width は 2^32 未満 フレーム数は 2^64 未満 将来的に生放送に対応した場合に桁あふれを防ぐために多めに桁数を持たせている Audio 音声型 詳細は未定 Vector 上記の型の可変長配列 （2^32 個未満） 中に Vector は入れられない 1. 型1.1. 基本型"},"architecture/ast.html":{"url":"architecture/ast.html","title":"抽象構文木","keywords":"","body":"1. 抽象構文木 (AST) 1.1. 着想 タイムライン上には関数型プログラミングとしてのASTを構築する 変数束縛として補助的に副出力を用いることもできる 単なるノードベースプログラミングとしてのDAGを構築するのに比べて，構造化する理由が発生するという意図 1.2. 入力 各ノードは任意個の入力を持つ 入力に取れるのは以下のいずれか 即値 他プラグインの主出力 自分のみが取得できる 他プラグインの副出力 任意個の入力で共有できる 1.3. 出力 各ノードは1個以上の出力を持つ 最初の出力は「主出力」であり，UI上でも親子関係を構築する 2番目以降の出力は「副出力」であり，任意の場所から参照できる ただし，循環を作ることは許可されない 1.4. 木構造 Effect のプラグインをノードとし，主出力の入力を親子関係とする木を構築する 値の上書き等で主出力を上書きした際には，ASTノードごと消滅する （副出力も消える） 2. 代入 代入によりASTノードが消滅することがある サブツリーとメインツリーに分け，間に存在する副出力の参照を全て切断する処理をしている Undo と Redo では，再び繋ぎなおす必要がある （2025/04/08 時点で未実装） 3. マクロ Macro のプラグインは AST を生成できる （2025/04/08 時点で未実装） 実体を生み出すわけではなく，レンダリング時のみ生成される仮のサブツリーを生成する 実体化した上で，手動で編集することもできる 4. スケジューリング 4.1. トポロジカルソート 主出力と副出力両方の参照関係を用いて，トポロジカルソートを行う。 トポロジカルソートに失敗した場合にはスケジューリング不能としてレンダリングに失敗する 1フレームずつ，順に呼び出すことで各フレームを生成する 4.2. 非因果的システム 例えば逆再生などは代表的な非因果的システム 入力パラメータ全体について，未来の値を取れる必要がある トポロジカルソート結果を，非因果的システムを根とするノード群に切り分ける それらを1フレームずつ，順に呼び出して各フレームを生成する 後続の処理で使う変数のみ，全フレーム分を保持する 1. 抽象構文木 (AST)1.1. 着想1.2. 入力1.3. 出力1.4. 木構造2. 代入3. マクロ4. スケジューリング4.1. トポロジカルソート4.2. 非因果的システム"},"architecture/layer_rendering.html":{"url":"architecture/layer_rendering.html","title":"レイヤー構造（レンダリング）","keywords":"","body":"1. 全体像 下位レイヤーから順に，以下の4層で構成されている Pluginメモリ管理層 Plugin層 キャッシュ管理層 スケジューリング層 2. Pluginメモリ管理層 2.1. 役割 TODO: 書く 2.2. 可能な操作 TODO: 書く 3. Plugin層 3.1. 役割 TODO: 書く 3.2. 可能な操作 TODO: 書く 4. キャッシュ管理層 4.1. 役割 TODO: 書く 4.2. 可能な操作 TODO: 書く 5. スケジューリング層 5.1. 役割 TODO: 書く 5.2. 可能な操作 TODO: 書く 1. 全体像2. Pluginメモリ管理層2.1. 役割2.2. 可能な操作3. Plugin層3.1. 役割3.2. 可能な操作4. キャッシュ管理層4.1. 役割4.2. 可能な操作5. スケジューリング層5.1. 役割5.2. 可能な操作"},"architecture/layer_ast.html":{"url":"architecture/layer_ast.html","title":"レイヤー構造（AST管理）","keywords":"","body":"1. 全体像 下位レイヤーから順に，以下の4層で構成されている AST構築＆プラグイン情報管理層 AST変形層 AST操作層 UI翻訳層 2. AST構築＆プラグイン情報管理層 2.1. 役割 TODO: 書く 2.2. 可能な操作 TODO: 書く 3. AST変形層 3.1. 役割 TODO: 書く 3.2. 可能な操作 TODO: 書く 4. AST操作層 4.1. 役割 TODO: 書く 4.2. 可能な操作 TODO: 書く 4.3. 履歴管理 TODO: 書く 5. UI翻訳層 5.1. 役割 TODO: 書く 5.2. 可能な操作 TODO: 書く 1. 全体像2. AST構築＆プラグイン情報管理層2.1. 役割2.2. 可能な操作3. AST変形層3.1. 役割3.2. 可能な操作4. AST操作層4.1. 役割4.2. 可能な操作4.3. 履歴管理5. UI翻訳層5.1. 役割5.2. 可能な操作"},"architecture/ui_ast.html":{"url":"architecture/ui_ast.html","title":"UIとAST","keywords":"","body":"1. 概要 TODO: 書く 2. エフェクトのリスト表示 2.1. ASTからUIへの変換 TODO: 書く 2.2. UIからASTへの変換 TODO: 書く 3. トランジション 3.1. ASTからUIへの変換 TODO: 書く 3.2. UIからASTへの変換 TODO: 書く 4. マクロの展開表示 4.1. ASTからUIへの変換 TODO: 書く 4.2. UIからASTへの変換 TODO: 書く 5. レイヤーの表示 5.1. ASTからUIへの変換 TODO: 書く 5.2. UIからASTへの変換 TODO: 書く 1. 概要2. エフェクトのリスト表示2.1. ASTからUIへの変換2.2. UIからASTへの変換3. トランジション3.1. ASTからUIへの変換3.2. UIからASTへの変換4. マクロの展開表示4.1. ASTからUIへの変換4.2. UIからASTへの変換5. レイヤーの表示5.1. ASTからUIへの変換5.2. UIからASTへの変換"},"architecture/macro.html":{"url":"architecture/macro.html","title":"マクロ展開","keywords":"","body":"1. 概要 TODO: 書く 2. プラグイン側の情報 TODO: 書く 3. 処理例 TODO: 書く 4. UIでの表示例 TODO: 書く 1. 概要2. プラグイン側の情報3. 処理例4. UIでの表示例"},"architecture/scheduling.html":{"url":"architecture/scheduling.html","title":"スケジューリング","keywords":"","body":"1. 概要 TODO: 書く トポロジカルソートして，変数寿命の管理とかをしている 2. 処理内容 2.1. レンダリング時の挙動 TODO: 書く 並列処理する 非因果的エフェクトの前は一旦全部レンダリングする 2.2. 実装未定： 再帰的レンダリング処理 TODO: 書く 直列処理する 非因果的エフェクトとか関係なく，要求された部分のみを計算する 2.3. 実装未定： Dirtyフラグの実装 TODO: 書く Dirtyな部分だけ再レンダリングする 1. 概要2. 処理内容2.1. レンダリング時の挙動2.2. 実装未定： 再帰的レンダリング処理2.3. 実装未定： Dirtyフラグの実装"}}